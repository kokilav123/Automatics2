pipeline {
    agent any
    parameters {
        booleanParam(name: 'DEPLOY_AUTOMATICS_ORCHESTRATION', defaultValue: true, description: 'Tick this checkbox to deploy Automatics Orchestration in the VM specified below')
        string defaultValue: '0.0.0.0', description: 'Enter the IP Address of the VM in which Automatics orchestration Server needs to be deployed', name: 'AUTOMATICS_IP_ADDRESS', trim: true
        credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials to Login to the VM in whcih Automatics Orchestration Server to be deployed', name: 'AUTOMATICS_VM_CREDENTIALS', required: true
        string defaultValue: '8080', description: 'Enter the port in which Automatics Orchestration tomcat server should be running', name: 'AUTOMATICS_SERVER_PORT', trim: true
		string defaultValue: 'root', description: 'Enter the Username of Automatics Mysql DB', name: 'AUTOMATICS_MYSQL_DB_USERNAME', trim: true
		string defaultValue: '/opt/automatics/server/logs', description: 'Enter a directory in server VM where Tomcat and Automatics server logs to be persisted. If not given logs will be generated in the default directory', name: 'AUTOMATICS_LOG_DIRECTORY', trim: true
		
        string defaultValue: '0.0.0.0', description: 'Enter the IP Address of the VM in which Automatics orchestration DB needs to be deployed', name: 'AUTOMATICS_DB_IP_ADDRESS', trim: true
        credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials to Login to the VM in whcih Automatics Orchestration DB to be deployed', name: 'AUTOMATICS_DB_VM_CREDENTIALS', required: true
		string defaultValue: '3306', description: 'Enter the port in which Automatics Orchestration database should be running', name: 'AUTOMATICS_DB_PORT', trim: true
		password description: 'Enter the Root password for MYSQL DB', name: 'AUTOMATICS_MYSQL_ROOT_PASSWORD'
		string defaultValue: '/home/automatics/db/persistance/data', description: 'Enter a directory in database VM where the data should be persisted', name: 'AUTOMATICS_DB_DATA_DIR', trim: true
		
        string defaultValue: '0.0.0.0', description: 'Enter the IP Address of the VM in which Rack Data Service App needs to be deployed', name: 'RACK_DATA_SERVICE_IP_ADDRESS', trim: true
        credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials to Login to the VM in whcih Rack Data Service App to be deployed', name: 'RACK_DATA_SERVICE_VM_CREDENTIALS', required: true
        string defaultValue: '8084', description: 'Enter the port in which Rack Data Service App should be running', name: 'RACK_DATA_SERVICE_PORT', trim: true
		
        booleanParam(name: 'DEPLOY_AUTOMATICS_PROPERTIES', defaultValue: true, description: 'Tick this checkbox to deploy Automatics properties in the VM specified below')
        string defaultValue: '0.0.0.0', description: 'Enter the IP Address of the VM in which Automatics properties Server needs to be deployed', name: 'AUTOMATICS_PROPS_IP_ADDRESS', trim: true
        credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials to Login to the VM in whcih Automatics properties Server to be deployed', name: 'AUTOMATICS_PROPS_VM_CREDENTIALS', required: true
        string defaultValue: '8080', description: 'Enter the port in which Automatics Properties Tomcat server should be running', name: 'AUTOMATICS_PROPS_SERVER_PORT', trim: true
		string defaultValue: '/opt/automatics-props/server/logs', description: 'Enter a directory in server VM where Tomcat and Automatics properties server logs to be persisted. If not given logs will be generated in the default directory', name: 'AUTOMATICS_PROPS_LOG_DIRECTORY', trim: true
		string defaultValue: 'https://automatics.com/Automatics', description: 'Enter Automatics Orcherstration URL to be configured in automatics properties', name: 'AUTOMATICS_ORCH_URL', trim: true
		string defaultValue: 'https://deviceManager.com/DeviceManager', description: 'Enter Device Manager URL to be configured in automatics properties', name: 'DEVICE_MANAGER_URL', trim: true
		string defaultValue: 'admin', description: 'Enter the Username of Automatics Properties UI', name: 'AUTOMATICS_PROPS_UI_USERNAME', trim: true
		password description: 'Enter the Password for Automatics Properties UI', name: 'AUTOMATICS_PROPS_UI_PASSWORD'
				
        booleanParam(name: 'DEPLOY_DEVICE_MANAGER', defaultValue: true, description: 'Tick this checkbox to deploy Device Manager in the VM specified below')
        string defaultValue: '0.0.0.0', description: 'Enter the IP Address of the VM in which Device Manager Server needs to be deployed', name: 'DEVICE_MANAGER_IP_ADDRESS', trim: true
        credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials to Login to the VM in whcih Device Manager Server to be deployed', name: 'DEVICE_MANAGER_VM_CREDENTIALS', required: true
        string defaultValue: '8080', description: 'Enter the port in which Device Manager tomcat server should be running', name: 'DEVICE_MANAGER_SERVER_PORT', trim: true
		string defaultValue: 'root', description: 'Enter the Username of Automatics Mysql DB', name: 'DEVICE_MANAGER_DB_USERNAME', trim: true
		string defaultValue: '/opt/deviceManager/server/logs', description: 'Enter a directory in server VM where Tomcat and Device Manager server logs to be persisted. If not given logs will be generated in the default directory', name: 'DEVICE_MANAGER_LOG_DIRECTORY', trim: true
		
		string defaultValue: '0.0.0.0', description: 'Enter the IP Address of the VM in which Device Manager DB needs to be deployed', name: 'DEVICE_MANAGER_DB_IP_ADDRESS', trim: true
        credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials to Login to the VM in whcih Device Manager DB to be deployed', name: 'DEVICE_MANAGER_DB_VM_CREDENTIALS', required: true
		string defaultValue: '3306', description: 'Enter the port in which Device Manager database should be running', name: 'DEVICE_MANAGER_DB_PORT', trim: true
		password description: 'Enter the Root password for MYSQL DB of Device Manager', name: 'DEVICE_MANAGER_MYSQL_ROOT_PASSWORD'
		string defaultValue: 'deviceManager.com', description: 'Enter the public domain details used for accessing device manager application in any of the formats like devicemanager.com or public_ip:port or domain_name:port', name: 'DEVICE_MANAGER_SWAGGER_HOST', trim: true
		string defaultValue: '/home/deviceManager/db/persistance/data', description: 'Enter a directory in database VM where the data should be persisted', name: 'DEVICE_MANAGER_DB_DATA_DIR', trim: true
		
		booleanParam(name: 'DEPLOY_DEVICE_MANAGER_UI', defaultValue:true, description: 'Tick this checkbox to deploy Device Manager UI in the VM specified below')
		string defaultValue: '0.0.0.0', description:'Enter the IP Address of the VM in which Device Manager UI Server needs to be deployed', name: 'DEVICE_MANAGER_UI_IP_ADDRESS', trim: true
		credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '',description: 'Select or Add credentials to Login to the VM in whcih Device Manager UI Server to be deployed', name: 'DEVICE_MANAGER_UI_VM_CREDENTIALS',required: true
		string defaultValue: '8080', description: 'Enter the port in which Device Manager UI Tomcat server should be running', name: 'DEVICE_MANAGER_UI_SERVER_PORT', trim: true
		string defaultValue: '/opt/deviceManagerUI/server/logs', description: 'Enter a directory in server VM where Tomcat and Device Manager UI server logs to be persisted. If not given logs will be generated in the default directory', name: 'DEVICE_MANAGER_UI_LOG_DIRECTORY', trim: true
		
    }
    stages {
        stage('Prepare Automatics Orchestration Docker images') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    sh """
                    docker save automatics-orchestration-db > automatics-orchestration-db.tar
                    echo "Successfully Compressed Automatics Orchestration DB Docker image to automatics-orchestration-db.tar"
                    docker save automatics-orchestration > automatics-orchestration.tar
                    echo "Successfully Compressed Automatics Orchestration Server Docker image to automatics-orchestration.tar"
                    """
                }
            }
        }
        stage('Transfer Automatics DB Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Orchestration-DB', params.AUTOMATICS_DB_IP_ADDRESS, params.AUTOMATICS_DB_VM_CREDENTIALS)
                    transferDockerImageToVM(remote, 'automatics/deployment/automatics-orchestration/db/dockerImage','automatics-orchestration-db.tar')
					echo "Successfully transfered and loaded Automatics DB docker image to the VM"
                }
            }
        }
        stage('Stop & Remove Automatics DB Docker Container') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Orchestration-DB', params.AUTOMATICS_DB_IP_ADDRESS, params.AUTOMATICS_DB_VM_CREDENTIALS)
                    try {
                        sshCommand remote: remote, command: "docker rm \$(docker stop \$(docker ps -a | grep automatics_orchestration_db_ | awk \'{print \$1}\'))"
                    } catch (err) {
                        echo "Caught: ${err}"
                    }                    
					echo "Successfully stopped and removed Automatics DB docker conatiner"
                }
            }
        }
        stage('Deploy Automatics DB Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Orchestration-DB', params.AUTOMATICS_DB_IP_ADDRESS, params.AUTOMATICS_DB_VM_CREDENTIALS)    
                    def containerName = "automatics_orchestration_db_${params.AUTOMATICS_DB_PORT}"
                    sshCommand remote: remote, command: "mkdir -p '${params.AUTOMATICS_DB_DATA_DIR}'"
                    if("${params.AUTOMATICS_IP_ADDRESS}" == "${params.AUTOMATICS_DB_IP_ADDRESS}"){
                        try {
                            sshCommand remote: remote, command: "docker network create automatics_network"
                        } catch (err) {
                            echo "Caught: ${err}"
                        }
                        sshCommand remote: remote, command: "docker run --name='${containerName}' -v '${params.AUTOMATICS_DB_DATA_DIR}':/var/lib/mysql -e MYSQL_ROOT_PASSWORD='${params.AUTOMATICS_MYSQL_ROOT_PASSWORD}' -p '${params.AUTOMATICS_DB_PORT}':3306 --net automatics_network -d automatics-orchestration-db:latest"
                    } else {
                        sshCommand remote: remote, command: "docker run --name='${containerName}' -v '${params.AUTOMATICS_DB_DATA_DIR}':/var/lib/mysql -e MYSQL_ROOT_PASSWORD='${params.AUTOMATICS_MYSQL_ROOT_PASSWORD}' -p '${params.AUTOMATICS_DB_PORT}':3306 -d automatics-orchestration-db:latest"
                    }
                }
            }
        }
        stage('Transfer Automatics Server Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Orchestration', params.AUTOMATICS_IP_ADDRESS, params.AUTOMATICS_VM_CREDENTIALS)
                    transferDockerImageToVM(remote, 'automatics/deployment/automatics-orchestration/server/dockerImage','automatics-orchestration.tar')
					echo "Successfully transfered and loaded Automatics Tomcat docker image to the VM"
                }
            }
        }
        stage('Stop & Remove Automatics Tomcat Docker Container') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Orchestration', params.AUTOMATICS_IP_ADDRESS, params.AUTOMATICS_VM_CREDENTIALS)
                    try {
							sshCommand remote: remote, command: "docker rm \$(docker stop \$(docker ps -a | grep automatics_orchestration_tomcat_ | awk \'{print \$1}\'))"
						} catch (err) {
							echo "Caught: ${err}"
						}
					echo "Successfully stopped and removed Automatics Tomcat docker conatiner"
                }
            }
        }
        stage('Deploy Automatics Server to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Orchestration', params.AUTOMATICS_IP_ADDRESS, params.AUTOMATICS_VM_CREDENTIALS)
                    def dbUrl = "jdbc:mysql://${params.AUTOMATICS_DB_IP_ADDRESS}:${params.AUTOMATICS_DB_PORT}/automatics?autoReconnect=true"
					def dbUrlSingleVM = "jdbc:mysql://automatics_orchestration_db_${params.AUTOMATICS_DB_PORT}:3306/automatics?autoReconnect=true"
					def containerName = "automatics_orchestration_tomcat_${params.AUTOMATICS_SERVER_PORT}"
                    
                    sshCommand remote: remote, command: "mkdir -p '${params.AUTOMATICS_LOG_DIRECTORY}'"
                    if("${params.AUTOMATICS_IP_ADDRESS}" == "${params.AUTOMATICS_DB_IP_ADDRESS}"){                      
                        sshCommand remote: remote, command: "docker run --net automatics_network -e DB_URL='${dbUrlSingleVM}' -e DB_USERNAME='${params.AUTOMATICS_MYSQL_DB_USERNAME}' -e DB_PASSWORD='${params.AUTOMATICS_MYSQL_ROOT_PASSWORD}' -v '${params.AUTOMATICS_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.AUTOMATICS_SERVER_PORT}':8080 --name='${containerName}' -d automatics-orchestration:latest"
                    } else {                        
                        sshCommand remote: remote, command: "docker run -e DB_URL='${dbUrl}' -e DB_USERNAME='${params.AUTOMATICS_MYSQL_DB_USERNAME}' -e DB_PASSWORD='${params.AUTOMATICS_MYSQL_ROOT_PASSWORD}' -v '${params.AUTOMATICS_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.AUTOMATICS_SERVER_PORT}':8080 --name='${containerName}' -d automatics-orchestration:latest"
                    }
                }
            }
        }
        stage('Prepare Rack Data Service Docker images') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    sh """
                    docker save rack-data-service > rack-data-service.tar
                    echo "Successfully Compressed Rack Data Service Docker image to rack-data-service.tar"
                    """
                }
            }
        }
        stage('Transfer Rack Data Service Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Rack-Data-Service', params.RACK_DATA_SERVICE_IP_ADDRESS, params.RACK_DATA_SERVICE_VM_CREDENTIALS)
                    transferDockerImageToVM(remote, 'automatics/deployment/rack-data-service/server/dockerImage','rack-data-service.tar')
					
                }
            }
        }
        stage('Stop & Remove Rack Data Service Docker Container') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Rack-Data-Service', params.RACK_DATA_SERVICE_IP_ADDRESS, params.RACK_DATA_SERVICE_VM_CREDENTIALS)
                    
                    try {
                        sshCommand remote: remote, command: "docker rm \$(docker stop \$(docker ps -a | grep rack_data_service_ | awk \'{print \$1}\'))"
                    } catch (err) {
                        echo "Caught: ${err}"
                    }
					echo "Successfully stopped and removed Rack Data Service docker conatiner"
                }
            }
        }
        stage('Deploy Rack Data Service App to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
                    remote = sshToVM('Rack-Data-Service', params.RACK_DATA_SERVICE_IP_ADDRESS, params.RACK_DATA_SERVICE_VM_CREDENTIALS)
                    def containerName = "rack_data_service_${params.RACK_DATA_SERVICE_PORT}"
					def dbContainerName = "automatics_orchestration_db_${params.AUTOMATICS_DB_PORT}"
                    
                    sshCommand remote: remote, command: "mkdir -p '${params.RACK_DATA_SERVICE_LOG_DIRECTORY}'"
                    if("${params.RACK_DATA_SERVICE_IP_ADDRESS}" == "${params.AUTOMATICS_DB_IP_ADDRESS}"){
                        sshCommand remote: remote, command: "docker run --net automatics_network -e DB_HOST='${dbContainerName}' -e DB_PORT=3306 -e DB_USERNAME='${params.AUTOMATICS_DB_USERNAME}' -e SERVER_PORT='${params.RACK_DATA_SERVICE_PORT}' -e DB_PASSWORD='${params.AUTOMATICS_MYSQL_ROOT_PASSWORD}' -v '${params.RACK_DATA_SERVICE_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.RACK_DATA_SERVICE_PORT}':8084 --name='${containerName}' -d rack-data-service:latest"
                    } else {
                        sshCommand remote: remote, command: "docker run -e DB_HOST='${params.AUTOMATICS_DB_IP_ADDRESS}' -e DB_PORT='${params.AUTOMATICS_DB_PORT}' -e DB_USERNAME='${params.AUTOMATICS_DB_USERNAME}' -e SERVER_PORT='${params.RACK_DATA_SERVICE_PORT}' -e DB_PASSWORD='${params.AUTOMATICS_MYSQL_ROOT_PASSWORD}' -v '${params.RACK_DATA_SERVICE_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.RACK_DATA_SERVICE_PORT}':8084 --name='${containerName}' -d rack-data-service:latest"
                    }
                }
            }
        }	
        stage('Prepare Automatics Properties Docker images') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_PROPERTIES
                }
            }
            steps {
                script{
                    sh """
                    docker save automatics-props > automatics-props.tar
                    echo "Successfully Compressed Automatics Properties DB Docker image to automatics-props.tar"
                    """
                }
            }
        }
        stage('Transfer Automatics Properties Server Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_PROPERTIES
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Properties', params.AUTOMATICS_PROPS_IP_ADDRESS, params.AUTOMATICS_PROPS_VM_CREDENTIALS)
                    transferDockerImageToVM(remote, 'automatics-props/deployment/automatics-properties/server/dockerImage','automatics-props.tar')
					echo "Successfully transfered and loaded Automatics Properties Server docker image to the VM"
                }
            }
        }
        stage('Stop & Remove Automatics Props Tomcat Docker Container') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_PROPERTIES
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Properties', params.AUTOMATICS_PROPS_IP_ADDRESS, params.AUTOMATICS_PROPS_VM_CREDENTIALS)
                    try {
                        sshCommand remote: remote, command: "docker rm \$(docker stop \$(docker ps -a | grep automatics_props_ | awk \'{print \$1}\'))"
                    } catch (err) {
                        echo "Caught: ${err}"
                    }

					echo "Successfully stopped and removed Automatics props Tomcat docker conatiner"
                }
            }
        }
        stage('Deploy Automatics Properties Server to the VM') {
            when {
                expression {
                    return params.DEPLOY_AUTOMATICS_PROPERTIES
                }
            }
            steps {
                script{
                    remote = sshToVM('Automatics-Properties', params.AUTOMATICS_PROPS_IP_ADDRESS, params.AUTOMATICS_PROPS_VM_CREDENTIALS)
                    
                    def containerName = "automatics_props_${params.AUTOMATICS_PROPS_SERVER_PORT}"

                    sshCommand remote: remote, command: "mkdir -p '${params.AUTOMATICS_PROPS_LOG_DIRECTORY}'"

                    sshCommand remote: remote, command: "docker run -e UI_USERNAME='${params.AUTOMATICS_PROPS_UI_USERNAME}' -e UI_PASSWORD='${params.AUTOMATICS_PROPS_UI_PASSWORD}' -e AUTOMATICS_ORCH_URL='${params.AUTOMATICS_ORCH_URL}' -e DEVICE_MANAGER_URL='${params.DEVICE_MANAGER_URL}' -v '${params.AUTOMATICS_PROPS_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.AUTOMATICS_PROPS_SERVER_PORT}':8080 --name='${containerName}' -d automatics-props:latest"
                }
            }
        }
        
        stage('Prepare Device Manager Docker images') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER
                }
            }
            steps {
                script{
                    sh """
                    docker save device-manager-db > device-manager-db.tar
                    echo "Successfully Compressed Device Manager DB Docker image to device-manager-db.tar"
                    docker save device-manager > device-manager.tar
                    echo "Successfully Compressed Device Manager Server Docker image to device-manager.tar"
                    """
                }
            }
        }
        stage('Transfer Device Manager DB Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager-DB', params.DEVICE_MANAGER_DB_IP_ADDRESS, params.DEVICE_MANAGER_DB_VM_CREDENTIALS)
                    transferDockerImageToVM(remote, 'deviceManager/deployment/device-manager/db/dockerImage','device-manager-db.tar')
					
					echo "Successfully transfered and loaded Device Manager DB docker image to the VM"
                }
            }
        }
        stage('Stop & Remove Device Manager DB Docker Container') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager-DB', params.DEVICE_MANAGER_DB_IP_ADDRESS, params.DEVICE_MANAGER_DB_VM_CREDENTIALS)
                    
					echo "Successfully stopped and removed Device Manager DB docker conatiner"
                }
            }
        }
        stage('Deploy Device Manager DB Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager-DB', params.DEVICE_MANAGER_DB_IP_ADDRESS, params.DEVICE_MANAGER_DB_VM_CREDENTIALS)
                    def containerName = "device_manager_db_${params.DEVICE_MANAGER_DB_PORT}"
                                            
                    sshCommand remote: remote, command: "mkdir -p 'echo ${params.DEVICE_MANAGER_DB_DATA_DIR}'"
                    if("${params.DEVICE_MANAGER_IP_ADDRESS}" == "${params.DEVICE_MANAGER_DB_IP_ADDRESS}"){
                        try {
                            sshCommand remote: remote, command: "docker network create device_manager_network"
                        } catch (err) {
                            echo "Caught: ${err}"
                        }
                        sshCommand remote: remote, command: "docker run --name='${containerName}' -v '${params.DEVICE_MANAGER_DB_DATA_DIR}':/var/lib/mysql -e MYSQL_ROOT_PASSWORD='${params.DEVICE_MANAGER_MYSQL_ROOT_PASSWORD}' -p '${params.DEVICE_MANAGER_DB_PORT}':3306 --net device_manager_network -d device-manager-db:latest"
                    } else {
                        sshCommand remote: remote, command: "docker run --name='${containerName}' -v '${params.DEVICE_MANAGER_DB_DATA_DIR}':/var/lib/mysql -e MYSQL_ROOT_PASSWORD='${params.DEVICE_MANAGER_MYSQL_ROOT_PASSWORD}' -p '${params.DEVICE_MANAGER_DB_PORT}':3306 -d device-manager-db:latest"
                    }
                }
            }
        }
        stage('Transfer Device Manager Server Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager', params.DEVICE_MANAGER_IP_ADDRESS, params.DEVICE_MANAGER_VM_CREDENTIALS)
                    transferDockerImageToVM(remote, 'deviceManager/deployment/device-manager/server/dockerImage','device-manager.tar')
					echo "Successfully transfered and loaded Device Manager Tomcat docker image to the VM"
                }
            }
        }
        stage('Stop & Remove Device Manager Tomcat Docker Container') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager', params.DEVICE_MANAGER_IP_ADDRESS, params.DEVICE_MANAGER_VM_CREDENTIALS)
                    
                    try {
                        sshCommand remote: remote, command: "docker rm \$(docker stop \$(docker ps -a | grep device_manager_tomcat_ | awk \'{print \$1}\'))"
                    } catch (err) {
                        echo "Caught: ${err}"
                    }
					echo "Successfully stopped and removed Device Manager Tomcat docker conatiner"
                }
            }
        }
        stage('Deploy Device Manager Server to the VM') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager', params.DEVICE_MANAGER_IP_ADDRESS, params.DEVICE_MANAGER_VM_CREDENTIALS)
                    def containerName = "device_manager_tomcat_${params.DEVICE_MANAGER_SERVER_PORT}"
					def dbContainerName = "device_manager_db_${params.DEVICE_MANAGER_DB_PORT}"
                    
                    sshCommand remote: remote, command: "mkdir -p '${params.DEVICE_MANAGER_LOG_DIRECTORY}'"
                    if("${params.DEVICE_MANAGER_IP_ADDRESS}" == "${params.DEVICE_MANAGER_DB_IP_ADDRESS}"){
                        sshCommand remote: remote, command: "docker run --net device_manager_network -e DB_HOST='${dbContainerName}' -e DB_PORT=3306 -e DB_USERNAME='${params.DEVICE_MANAGER_DB_USERNAME}' -e SERVER_PORT='${params.DEVICE_MANAGER_SERVER_PORT}' -e DB_PASSWORD='${params.DEVICE_MANAGER_MYSQL_ROOT_PASSWORD}' -e SWAGGER_HOST='${params.DEVICE_MANAGER_SWAGGER_HOST}' -v '${params.DEVICE_MANAGER_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.DEVICE_MANAGER_SERVER_PORT}':8080 --name='${containerName}' -d device-manager:latest"
                    } else {
                        sshCommand remote: remote, command: "docker run -e DB_HOST='${params.DEVICE_MANAGER_DB_IP_ADDRESS}' -e DB_PORT='${params.DEVICE_MANAGER_DB_PORT}' -e DB_USERNAME='${params.DEVICE_MANAGER_DB_USERNAME}' -e SERVER_PORT='${params.DEVICE_MANAGER_SERVER_PORT}' -e DB_PASSWORD='${params.DEVICE_MANAGER_MYSQL_ROOT_PASSWORD}' -e SWAGGER_HOST='${params.DEVICE_MANAGER_SWAGGER_HOST}' -v '${params.DEVICE_MANAGER_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.DEVICE_MANAGER_SERVER_PORT}':8080 --name='${containerName}' -d device-manager:latest"
                    }
                }
            }
        }
		
		stage('Prepare Device Manager UI Docker images') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER_UI
                }
            }
            steps {
                script{
                    sh """
                    docker save device-manager-ui > device-manager-ui.tar
                    echo "Successfully Compressed Device Manager UI Docker image to device-manager-ui.tar"
                    """
                }
            }
        }
        stage('Transfer Device Manager UI Server Docker image to the VM') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER_UI
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager-UI', params.DEVICE_MANAGER_UI_IP_ADDRESS, params.DEVICE_MANAGER_UI_VM_CREDENTIALS)
                    transferDockerImageToVM(remote, 'devicemanagerUI/deployment/device-manager-ui/server/dockerImage','device-manager-ui.tar')
					
                }
            }
        }
        stage('Stop & Remove Device Manager UI Tomcat Docker Container') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER_UI
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager-UI', params.DEVICE_MANAGER_UI_IP_ADDRESS, params.DEVICE_MANAGER_UI_VM_CREDENTIALS)
                    
                    try {
                        sshCommand remote: remote, command: "docker rm \$(docker stop \$(docker ps -a | grep device_manager_ui_tomcat_ | awk \'{print \$1}\'))"
                    } catch (err) {
                        echo "Caught: ${err}"
                    } 
					echo "Successfully stopped and removed Device Manager UI Tomcat docker conatiner"
                }
            }
        }
        stage('Deploy Device Manager UI Server to the VM') {
            when {
                expression {
                    return params.DEPLOY_DEVICE_MANAGER_UI
                }
            }
            steps {
                script{
                    remote = sshToVM('Device-Manager-UI', params.DEVICE_MANAGER_UI_IP_ADDRESS, params.DEVICE_MANAGER_UI_VM_CREDENTIALS)
                    def containerName = "device_manager_ui_tomcat_${params.DEVICE_MANAGER_UI_SERVER_PORT}"
                   				
                    sshCommand remote: remote, command: "mkdir -p '${params.DEVICE_MANAGER_UI_LOG_DIRECTORY}'"
                    
                    if("${params.DEVICE_MANAGER_IP_ADDRESS}" == "${params.DEVICE_MANAGER_UI_IP_ADDRESS}"){
                        sshCommand remote: remote, command: "docker run --net device_manager_network -e UI_HOST='${params.DEVICE_MANAGER_UI_IP_ADDRESS}' -e UI_PORT='${params.DEVICE_MANAGER_UI_SERVER_PORT}' -e DEVICE_MANAGER_IP_ADDRESS='${params.DEVICE_MANAGER_IP_ADDRESS}' -e DEVICE_MANAGER_SERVER_PORT='${params.DEVICE_MANAGER_SERVER_PORT}' -v '${params.DEVICE_MANAGER_UI_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.DEVICE_MANAGER_UI_SERVER_PORT}':8080 --name='${containerName}' -d device-manager-ui:latest"
                    } else {
                        sshCommand remote: remote, command: "docker run -e UI_HOST='${params.DEVICE_MANAGER_UI_IP_ADDRESS}' -e UI_PORT='${params.DEVICE_MANAGER_UI_SERVER_PORT}' -e DEVICE_MANAGER_IP_ADDRESS='${params.DEVICE_MANAGER_IP_ADDRESS}' -e DEVICE_MANAGER_SERVER_PORT='${params.DEVICE_MANAGER_SERVER_PORT}'  -v '${params.DEVICE_MANAGER_UI_LOG_DIRECTORY}':/usr/local/tomcat/logs -p '${params.DEVICE_MANAGER_UI_SERVER_PORT}':8080 --name='${containerName}' -d device-manager-ui:latest"
                    }   
                }
            }
        }		
    }
}

def transferDockerImageToVM(remote, imageTransferPath, dockerImageTarName) {
    
    def mkdirCommand = 'mkdir -p ' + imageTransferPath
    def vmImagePath = './'+ imageTransferPath + '/'
    def dockerLoadCommand = 'docker load < ./'+ imageTransferPath + '/' + dockerImageTarName
    
    try {
        sshCommand remote: remote, command: mkdirCommand
        sshPut remote: remote, from: dockerImageTarName, into: vmImagePath
        sshCommand remote: remote, command: dockerLoadCommand
    } catch (err) {
        echo "Caught: ${err}"
    }
}

def sshToVM(name, ipAddress, credentialsId) {
    def remote = [name: name, host: ipAddress, allowAnyHosts: true]
    withCredentials( [usernamePassword( credentialsId: credentialsId, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
    remote.user = USERNAME
    if(!env.PASSWORD){
        remote.password = ""
    } else {
        remote.password = PASSWORD
    }
    remote.port = 22
    }
    return remote
}
