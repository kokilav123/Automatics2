pipeline {
    agent any
    parameters {	
	  booleanParam(name: 'BUILD_AUTOMATICS_ORCHESTRATION', defaultValue: true, description: 'Check this box to build the .war file and Docker image of Automatics Orchestration')
      string defaultValue: 'https://code.rdkcentral.com/r/rdk/tools/automatics', description: 'Enter the URL of Automatics Git repository', name: 'AUTOMATICS_GIT_URL', trim: true
      string defaultValue: 'rdk-next', description: 'Enter Branch Name of Automatics Git repository', name: 'AUTOMATICS_GIT_BRANCH_NAME', trim: true
      credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials for Automatics Git Login', name: 'AUTOMATICS_GIT_CREDENTIALS', required: false
	  	
	  booleanParam(name: 'BUILD_AUTOMATICS_PROPERTIES', defaultValue: true, description: 'Check this box to build the .war file and Docker image of Automatics Properties')
      string defaultValue: 'https://code.rdkcentral.com/r/rdk/tools/automatics/automatics-props', description: 'Enter the URL of Automatics Properties Git repository', name: 'AUTOMATICS_PROPERTIES_GIT_URL', trim: true
      string defaultValue: 'rdk-next', description: 'Enter Branch Name of Automatics Properties Git repository', name: 'AUTOMATICS_PROPERTIES_GIT_BRANCH_NAME', trim: true
      credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials for Automatics Properties Git Login', name: 'AUTOMATICS_PROPERTIES_GIT_CREDENTIALS', required: false
	  
	  booleanParam(name: 'BUILD_DEVICE_MANAGER', defaultValue: true, description: 'Check this box to build the .war file and Docker image of Device Manager')
      string defaultValue: 'https://code.rdkcentral.com/r/rdk/tools/device-manager', description: 'Enter the URL of Device Manager Git repository', name: 'DEVICE_MANAGER_GIT_URL', trim: true
      string defaultValue: 'rdk-next', description: 'Enter Branch Name of Device Manager Git repository', name: 'DEVICE_MANAGER_GIT_BRANCH_NAME', trim: true
      credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '', description: 'Select or Add credentials for Device Manager Git Login', name: 'DEVICE_MANAGER_GIT_CREDENTIALS', required: false
	  
	  booleanParam(name: 'BUILD_DEVICE_MANAGER_UI',defaultValue:true,description: 'Check this box to build the .war file and Docker image of Device Manager UI')
	  string defaultValue: 'https://code.rdkcentral.com/r/rdk/tools/device-manager-ui/', description: 'Enter the URL of Device Manager UI Git repository',name:'DEVICE_MANAGER_UI_GIT_URL',trim:true
	  string defaultValue: 'rdk-next', description: 'Enter Branch Name of Device Manager UI Git repository', name:'DEVICE_MANAGER_UI_GIT_BRANCH_NAME', trim:true
	  credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '',description: 'Select or Add credentials for Device Manager UI Git Login', name: 'DEVICE_MANAGER_UI_GIT_CREDENTIALS', required: false
	  
	  booleanParam(name: 'BUILD_RACK_DATA_SERVICE',defaultValue:true,description: 'Check this box to build the .jar file and Docker image of Rack Data Service')
	  string defaultValue: 'https://code.rdkcentral.com/r/rdk/tools/automatics/scriptless-service', description: 'Enter the URL of Rack Data Service Git repository',name:'RACK_DATA_SERVICE_GIT_URL',trim:true
	  string defaultValue: 'rdk-next', description: 'Enter Branch Name of Rack Data Service Git repository', name:'RACK_DATA_SERVICE_GIT_BRANCH_NAME', trim:true
	  credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '',description: 'Select or Add credentials for Rack Data Service Git Login', name: 'RACK_DATA_SERVICE_GIT_CREDENTIALS', required: false
    
	  booleanParam(name: 'BUILD_DEBUGGER_SERVICE',defaultValue:true,description: 'Check this box to build the .jar file and Docker image of Smart Debugger Service')
	  string defaultValue: 'https://code.rdkcentral.com/r/rdk/tools/automatics/smart-debugger', description: 'Enter the URL of Smart Debugger Service Git repository',name:'DEBUGGER_SERVICE_GIT_URL',trim:true
	  string defaultValue: 'rdk-next', description: 'Enter Branch Name of Debugger Service Git repository', name:'DEBUGGER_SERVICE_GIT_BRANCH_NAME', trim:true
	  credentials credentialType: 'com.cloudbees.plugins.credentials.common.StandardCredentials', defaultValue: '',description: 'Select or Add credentials for Debugger Service Git Login', name: 'DEBUGGER_SERVICE_GIT_CREDENTIALS', required: false
    }
    stages {
        stage('Pull Automatics Orchestration Code from RDKM Repo') {
			when {
                expression {
                    return params.BUILD_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                script{
					dir('automationScripts/build/Automatics-Orchestration/project/'){
						if("${params.AUTOMATICS_GIT_CREDENTIALS}" == null || "${params.AUTOMATICS_GIT_CREDENTIALS}" ==''){
							echo "${params.AUTOMATICS_GIT_CREDENTIALS}"
							git branch: "${params.AUTOMATICS_GIT_BRANCH_NAME}", url: "${params.AUTOMATICS_GIT_URL}"
						} else {
							echo "${params.AUTOMATICS_GIT_CREDENTIALS}"
							git credentialsId: "${params.AUTOMATICS_GIT_CREDENTIALS}", branch: "${params.AUTOMATICS_GIT_BRANCH_NAME}", url: "${params.AUTOMATICS_GIT_URL}"
						}
					}
                }
            }
        }
        stage ('Automatics Orchestration Maven Build') {
			when {
                expression {
                    return params.BUILD_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
                sh """
				cp automationScripts/build/Automatics-Orchestration/editConfig.sh automationScripts/build/Automatics-Orchestration/project/editConfig.sh
				cd automationScripts/build/Automatics-Orchestration/project/
				mvn clean install"""
            }
            post {
                always {
                    archiveArtifacts artifacts: 'automationScripts/build/Automatics-Orchestration/project/releases/Automatics.war', onlyIfSuccessful: true
                }
            }
        }
        stage ('Automatics Orchestration Docker Build') {
			when {
                expression {
                    return params.BUILD_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
				dir('automationScripts/build/Automatics-Orchestration/project/'){
					sh 'docker build -f ../AutomaticsOrchDockerFile -t automatics-orchestration .'
				}
            }
        }
        stage ('Automatics Orchestration DB Docker Build') {
			when {
                expression {
                    return params.BUILD_AUTOMATICS_ORCHESTRATION
                }
            }
            steps {
				dir('automationScripts/build/Automatics-Orchestration/project/'){
					sh 'docker build -f ../AutomaticsOrchDBDockerFile -t automatics-orchestration-db .'
				}
            }
        }
        stage('Pull Automatics Properties Code from RDKM Repo') {
			when {
                expression {
                    return params.BUILD_AUTOMATICS_PROPERTIES
                }
            }
            steps {				
				script{
					dir('automationScripts/build/Automatics-Props/project/'){
						if("${params.AUTOMATICS_PROPERTIES_GIT_CREDENTIALS}" == null || "${params.AUTOMATICS_PROPERTIES_GIT_CREDENTIALS}" ==''){
							echo "${params.AUTOMATICS_PROPERTIES_GIT_CREDENTIALS}"
							git branch: "${params.AUTOMATICS_PROPERTIES_GIT_BRANCH_NAME}", url: "${params.AUTOMATICS_PROPERTIES_GIT_URL}"
						} else {
							echo "${params.AUTOMATICS_PROPERTIES_GIT_CREDENTIALS}"
							git credentialsId: "${params.AUTOMATICS_PROPERTIES_GIT_CREDENTIALS}", branch: "${params.AUTOMATICS_PROPERTIES_GIT_BRANCH_NAME}", url: "${params.AUTOMATICS_PROPERTIES_GIT_URL}"
						}
					}
				}
            }
        }
        stage ('Automatics Properties Maven Build') {
			when {
                expression {
                    return params.BUILD_AUTOMATICS_PROPERTIES
                }
            }
            steps {
                sh """
				cp automationScripts/build/Automatics-Props/editConfig.sh automationScripts/build/Automatics-Props/project/editConfig.sh
				cd automationScripts/build/Automatics-Props/project/
				mvn clean install"""
            }
            post {
                always {
                    archiveArtifacts artifacts: 'automationScripts/build/Automatics-Props/project/target/AutomaticsProps*.war', onlyIfSuccessful: true
                }
            }
        }
        stage ('Automatics Properties Docker Build') {
			when {
                expression {
                    return params.BUILD_AUTOMATICS_PROPERTIES
                }
            }
            steps {
				dir('automationScripts/build/Automatics-Props/project/'){
					sh 'docker build -f ../AutomaticsPropsDockerFile -t automatics-props .'
				}
            }
        }
        stage('Pull Device Manager Code from RDKM Repo') {
			when {
                expression {
                    return params.BUILD_DEVICE_MANAGER
                }
            }
            steps {
				script{					
					dir('automationScripts/build/Device-Manager/project/'){
						if("${params.DEVICE_MANAGER_GIT_CREDENTIALS}" == null || "${params.DEVICE_MANAGER_GIT_CREDENTIALS}" ==''){
							echo "${params.DEVICE_MANAGER_GIT_CREDENTIALS}"
							git branch: "${params.DEVICE_MANAGER_GIT_BRANCH_NAME}", url: "${params.DEVICE_MANAGER_GIT_URL}"
						} else {
							echo "${params.DEVICE_MANAGER_GIT_CREDENTIALS}"
							git credentialsId: "${params.DEVICE_MANAGER_GIT_CREDENTIALS}", branch: "${params.DEVICE_MANAGER_GIT_BRANCH_NAME}", url: "${params.DEVICE_MANAGER_GIT_URL}"
						}
					}
				}
            }
        }
        stage ('Device Manager Maven Build') {
			when {
                expression {
                    return params.BUILD_DEVICE_MANAGER
                }
            }
            steps {
                sh """
				cd automationScripts/build/Device-Manager/project/
				cp ../editConfig.sh ./editConfig.sh
				sh editConfig.sh
				cp ../startDocker.sh ./startDocker.sh
				mvn clean install"""
            }
            post {
                always {
                    archiveArtifacts artifacts: 'automationScripts/build/Device-Manager/project/target/device-manager*.war', onlyIfSuccessful: true
                }
            }
        }
        stage ('Device Manager Docker Build') {
			when {
                expression {
                    return params.BUILD_DEVICE_MANAGER
                }
            }
            steps {
				dir('automationScripts/build/Device-Manager/project/'){
					sh 'docker build -f ../DeviceManagerDockerFile -t device-manager .'
				}
            }
        }
        stage ('Device Manager DB Docker Build') {
			when {
                expression {
                    return params.BUILD_DEVICE_MANAGER
                }
            }
            steps {
				dir('automationScripts/build/Device-Manager/project/'){
					sh 'docker build -f ../DeviceManagerDBDockerFile -t device-manager-db .'
				}
            }
        }
	
		stage('Pull Device Manager UI Code from RDKM Repo') {
			when {
                expression {
                    return params.BUILD_DEVICE_MANAGER_UI
                }
            }
            steps {
                script{
					dir('automationScripts/build/Device-Manager-UI/project/'){
						if("${params.DEVICE_MANAGER_UI_GIT_CREDENTIALS}" == null || "${params.DEVICE_MANAGER_UI_GIT_CREDENTIALS}" ==''){
							echo "${params.DEVICE_MANAGER_UI_GIT_CREDENTIALS}"
							git branch: "${params.DEVICE_MANAGER_UI_GIT_BRANCH_NAME}", url: "${params.DEVICE_MANAGER_UI_GIT_URL}"
						} else {
							echo "${params.DEVICE_MANAGER_UI_GIT_CREDENTIALS}"
							git credentialsId: "${params.DEVICE_MANAGER_UI_GIT_CREDENTIALS}", branch: "${params.DEVICE_MANAGER_UI_GIT_BRANCH_NAME}", url: "${params.DEVICE_MANAGER_UI_GIT_URL}"
						}
					}
                }
            }
        }
		
		stage ('Device Manager UI Maven Build') {
			when {
                expression {
                    return params.BUILD_DEVICE_MANAGER_UI
                }
            }
            steps {
                sh """
				cd automationScripts/build/Device-Manager-UI/project/
				cp ../editConfig.sh ./editConfig.sh
				sh editConfig.sh
				cp ../startDocker.sh ./startDocker.sh
				mvn clean install"""
            }
            post {
                always {
                    archiveArtifacts artifacts: 'automationScripts/build/Device-Manager-UI/project/target/device-manager-ui*.war', onlyIfSuccessful: true
                }
            }
        }
		
		stage ('Device Manager UI Docker Build') {
			when {
                expression {
                    return params.BUILD_DEVICE_MANAGER_UI
                }
            }
            steps {
				dir('automationScripts/build/Device-Manager-UI/project/'){
					sh 'docker build -f ../DeviceManagerUIDockerFile -t device-manager-ui .'
				}
            }
        }
		
        stage('Pull Debugger Service Code from RDKM Repo') {
			when {
                expression {
                    return params.BUILD_DEBUGGER_SERVICE
                }
            }
            steps {
				script{					
					dir('automationScripts/build/DebuggerService/project/'){
						if("${params.DEBUGGER_SERVICE_GIT_CREDENTIALS}" == null || "${params.DEBUGGER_SERVICE_GIT_CREDENTIALS}" ==''){
							echo "${params.DEBUGGER_SERVICE_GIT_CREDENTIALS}"
							git branch: "${params.DEBUGGER_SERVICE_GIT_BRANCH_NAME}", url: "${params.DEBUGGER_SERVICE_GIT_URL}"
						} else {
							echo "${params.DEBUGGER_SERVICE_GIT_CREDENTIALS}"
							git credentialsId: "${params.DEBUGGER_SERVICE_GIT_CREDENTIALS}", branch: "${params.DEBUGGER_SERVICE_GIT_BRANCH_NAME}", url: "${params.DEBUGGER_SERVICE_GIT_URL}"
						}
					}
				}
            }
        }
        stage ('Debugger Service Maven Build') {
			when {
                expression {
                    return params.BUILD_DEBUGGER_SERVICE
                }
            }
            steps {
                sh """
				cd automationScripts/build/DebuggerService/project/smart-debugger/debuggerservice/
				cp ../../editConfig.sh ../editConfig.sh
				sh ../editConfig.sh
				mvn clean install"""
            }
            post {
                always {
                    archiveArtifacts artifacts: 'automationScripts/build/DebuggerService/project/smart-debugger/debuggerservice/target/debuggerservice*.jar', onlyIfSuccessful: true
                }
            }
        }
        stage ('Debugger Service Docker Build') {
			when {
                expression {
                    return params.BUILD_DEBUGGER_SERVICE
                }
            }
            steps {
				dir('automationScripts/build/DebuggerService/project/smart-debugger/'){
					sh 'docker build -f ../SmartDebuggerServiceDockerFile -t debugger-service .'
				}
            }
        }stage('Pull Rack Data Service Code from RDKM Repo') {
			when {
                expression {
                    return params.BUILD_RACK_DATA_SERVICE
                }
            }
            steps {
				script{					
					dir('automationScripts/build/RackDataService/project/'){
						if("${params.RACK_DATA_SERVICE_GIT_CREDENTIALS}" == null || "${params.RACK_DATA_SERVICE_GIT_CREDENTIALS}" ==''){
							echo "${params.RACK_DATA_SERVICE_GIT_CREDENTIALS}"
							git branch: "${params.RACK_DATA_SERVICE_GIT_BRANCH_NAME}", url: "${params.RACK_DATA_SERVICE_GIT_URL}"
						} else {
							echo "${params.RACK_DATA_SERVICE_GIT_CREDENTIALS}"
							git credentialsId: "${params.RACK_DATA_SERVICE_GIT_CREDENTIALS}", branch: "${params.RACK_DATA_SERVICE_GIT_BRANCH_NAME}", url: "${params.RACK_DATA_SERVICE_GIT_URL}"
						}
					}
				}
            }
        }
        stage ('Rack Data Service Maven Build') {
			when {
                expression {
                    return params.BUILD_RACK_DATA_SERVICE
                }
            }
            steps {
                sh """
				cd automationScripts/build/RackDataService/project/RackDataService/
				cp ../../editConfig.sh ../editConfig.sh
				sh ../editConfig.sh
				mvn clean install"""
            }
            post {
                always {
                    archiveArtifacts artifacts: 'automationScripts/build/RackDataService/project/RackDataService/target/rackdataservice*.jar', onlyIfSuccessful: true
                }
            }
        }
        stage ('Rack Data Service Docker Build') {
			when {
                expression {
                    return params.BUILD_RACK_DATA_SERVICE
                }
            }
            steps {
				dir('automationScripts/build/RackDataService/project/'){
					sh 'docker build -f ../RackDataServiceDockerFile -t rack-data-service .'
				}
            }
        }
        stage ('Clean UP') {
            steps {
				sh 'docker image prune -f'
				sh 'echo "Clean Up Completed !! Deleted all the old docker images"'
				
            }
        }
    }
}
